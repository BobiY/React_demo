

    (1) 列表和键
        首先，让我们回顾一下如何在JavaScript中转换列表。

        给定下面的代码，我们使用map()函数取一个数组numbers和双精度值。我们将返回的新数组map()赋给变量doubled并记录：

        const numbers = [1, 2, 3, 4, 5];
        const doubled = numbers.map((number) => number * 2);
        console.log(doubled);
        此代码记录[2, 4, 6, 8, 10]到控制台。

        在React中，将数组转换为元素列表几乎是相同的。
    (2) 渲染多个组件
        您可以构建元素集合，并使用花括号将它们包含在JSX中{}。

        下面，我们numbers使用Javascript map()函数循环遍历数组。<li>是每次循环返回的一个元素。最后，我们将结果的元素数组分配给listItems：

        const numbers = [1, 2, 3, 4, 5];
        const listItems = numbers.map((number) =>
          <li>{number}</li>
        );
        我们将整个listItems数组包含在一个<ul>元素中，并将其渲染到DOM：

        ReactDOM.render(
          <ul>{listItems}</ul>,
          document.getElementById('root')
        );


        此代码显示1到5之间的数字的项目符号列表。
    (3) 基本列表组件
        通常你会将列表放在组件中。

        我们可以将前面的例子重构为接受数组的一个组件，numbers并输出一个无序的元素列表。

        function NumberList(props) {
          const numbers = props.numbers;
          const listItems = numbers.map((number) =>
            <li>{number}</li>
          );
          return (
            <ul>{listItems}</ul>
          );
        }

        const numbers = [1, 2, 3, 4, 5];
        ReactDOM.render(
          <NumberList numbers={numbers} />,
          document.getElementById('root')
        );
        当您运行此代码时，将会收到一条警告，指出应为列表项提供一个键。“key”是创建元素列表时需要包含的特殊字符串属性。我们将在下一节讨论为什么它很重要。

        让我们分配一个key到我们的列表项里面numbers.map()并修复缺少的关键问题。

        function NumberList(props) {
          const numbers = props.numbers;
          const listItems = numbers.map((number) =>
            <li key={number.toString()}>
              {number}
            </li>
          );
          return (
            <ul>{listItems}</ul>
          );
        }

        const numbers = [1, 2, 3, 4, 5];
        ReactDOM.render(
          <NumberList numbers={numbers} />,
          document.getElementById('root')
        );
    (4) 键(key)
        键帮助确定哪些项目已更改，已添加或已删除。应该给数组中的元素赋予键以给元素一个稳定的身份：

        const numbers = [1, 2, 3, 4, 5];
        const listItems = numbers.map((number) =>
          <li key={number.toString()}>
            {number}
          </li>
        );
        选择键的最好方法是使用一个字符串，它在其兄弟之间唯一标识一个列表项。通常，您会使用数据中的ID作为键：

        const todoItems = todos.map((todo) =>
          <li key={todo.id}>
            {todo.text}
          </li>
        );
        当您对已呈现的项目没有稳定的ID时，可以使用项目索引作为最后一个手段的键：

        const todoItems = todos.map((todo, index) =>
          // Only do this if items have no stable IDs
          <li key={index}>
            {todo.text}
          </li>
        );
        如果项目可以重新排序，我们不建议对键使用索引，因为这将很慢。
    (5) 使用键提取组件
        键仅在周围数组的上下文中有意义。

        例如，如果提取一个ListItem组件，则应该将该键保存<ListItem />在数组中的元素上，而不是本身中的根<li>元素上ListItem。

        示例：键用法不正确

        function ListItem(props) {
          const value = props.value;
          return (
            // Wrong! There is no need to specify the key here:
            <li key={value.toString()}>
              {value}
            </li>
          );
        }

        function NumberList(props) {
          const numbers = props.numbers;
          const listItems = numbers.map((number) =>
            // Wrong! The key should have been specified here:
            <ListItem value={number} />
          );
          return (
            <ul>
              {listItems}
            </ul>
          );
        }

        const numbers = [1, 2, 3, 4, 5];
        ReactDOM.render(
          <NumberList numbers={numbers} />,
          document.getElementById('root')
        );
        示例：正确的key的用法

        function ListItem(props) {
          // Correct! There is no need to specify the key here:
          return <li>{props.value}</li>;
        }

        function NumberList(props) {
          const numbers = props.numbers;
          const listItems = numbers.map((number) =>
            // Correct! Key should be specified inside the array.
            <ListItem key={number.toString()}
                      value={number} />
          );
          return (
            <ul>
              {listItems}
            </ul>
          );
        }

        const numbers = [1, 2, 3, 4, 5];
        ReactDOM.render(
          <NumberList numbers={numbers} />,
          document.getElementById('root')
        );

        一个好的经验法则是map()调用中的元素需要键。
    (6) 列表中的元素的key是唯一的
        数组中使用的键在其兄弟元素之间应该是唯一的。但是，它们不需要是全局唯一的。当我们生成两个不同的数组时，我们可以使用相同的键：

        function Blog(props) {
          const sidebar = (
            <ul>
              {props.posts.map((post) =>
                <li key={post.id}>
                  {post.title}
                </li>
              )}
            </ul>
          );
          const content = props.posts.map((post) =>
            <div key={post.id}>
              <h3>{post.title}</h3>
              <p>{post.content}</p>
            </div>
          );
          return (
            <div>
              {sidebar}
              <hr />
              {content}
            </div>
          );
        }

        const posts = [
          {id: 1, title: 'Hello World', content: 'Welcome to learning React!'},
          {id: 2, title: 'Installation', content: 'You can install React from npm.'}
        ];
        ReactDOM.render(
          <Blog posts={posts} />,
          document.getElementById('root')
        );


        键用作React的提示，但它们不会传递给您的组件。如果你需要在组件中使用相同的值，则使用不同的名称显式地将它作为道具传递：

        const content = posts.map((post) =>
          <Post
            key={post.id}
            id={post.id}
            title={post.title} />
        );
        使用上面的示例，Post组件可以读取props.id，但不能props.key。
    (7) 在JSX中嵌入map（）
        在上面的示例中，我们声明了一个单独的listItems变量并将其包含在JSX中：

        function NumberList(props) {
          const numbers = props.numbers;
          const listItems = numbers.map((number) =>
            <ListItem key={number.toString()}
                      value={number} />
          );
          return (
            <ul>
              {listItems}
            </ul>
          );
        }
        JSX允许在大括号中嵌入任何表达式，所以我们可以内联map()结果：

        function NumberList(props) {
          const numbers = props.numbers;
          return (
            <ul>
              {numbers.map((number) =>
                <ListItem key={number.toString()}
                          value={number} />
              )}
            </ul>
          );
        }


        有时这会导致更清晰的代码，但这种风格也可以被滥用。像JavaScript一样，这是由你自己去决定是否要用这种嵌套。请记住，如果map()主体太嵌套，则可能是提取组件的好时机。
